import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Grid,
  Paper,
  Typography,
  Button,
  TextField,
  useTheme,
  CircularProgress,
} from '@mui/material';
import { useNavigate, useLocation } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { getMoodBasedRecommendations, searchSongs, getProxiedAudioUrl } from '../services/spotifyService';
import {
  fetchPlaylists,
  createPlaylist,
} from '../store/slices/playlistSlice';
import { playTrack } from '../store/slices/playerSlice';
import { motion } from 'framer-motion';

const Dashboard = () => {
  const theme = useTheme();
  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();
  const { playlists, loading } = useSelector((state) => state.playlist);
  const { currentTrack, isPlaying } = useSelector((state) => state.player);

  const [selectedMood, setSelectedMood] = useState(location.state?.mood || 'happy');
  const [searchQuery, setSearchQuery] = useState('');
  const [recommendationsLoading, setRecommendationsLoading] = useState(false);
  const [searchLoading, setSearchLoading] = useState(false);
  const [error, setError] = useState(null);
  const [recommendations, setRecommendations] = useState([]);
  const [searchResults, setSearchResults] = useState([]);
  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('spotify_access_token'));

  // Check if user is authenticated with Spotify
  useEffect(() => {
    const token = localStorage.getItem('spotify_access_token');
    setIsAuthenticated(!!token);
    console.log('Spotify authenticated:', !!token);
  }, []);

  useEffect(() => {
    dispatch(fetchPlaylists());

    // Only fetch recommendations if authenticated
    if (isAuthenticated) {
      fetchRecommendations();
    }
  }, [dispatch, selectedMood, isAuthenticated]);

  const fetchRecommendations = async () => {
    try {
      setRecommendationsLoading(true);
      const recs = await getMoodBasedRecommendations(selectedMood);
      if (recs) {
        setRecommendations(recs);
      } else {
        setError('No recommendations found for this mood');
      }
    } catch (err) {
      console.error('Error fetching recommendations:', err);
      setError('Error fetching recommendations. Please try again.');
    } finally {
      setRecommendationsLoading(false);
    }
  };

  const moodColors = {
    happy: '#FFD700',
    sad: '#87CEEB',
    energetic: '#FF69B4',
    calm: '#98FB98',
    romantic: '#FFB6C1',
    angry: '#FF4500',
    chill: '#ADD8E6',
  };

  const handleSearch = async (query) => {
    if (!query.trim()) {
      setSearchResults([]);
      return;
    }

    try {
      setSearchLoading(true);
      const results = await searchSongs(query);
      setSearchResults(results);
    } catch (error) {
      console.error('Error searching songs:', error);
      setError('Error searching songs');
    } finally {
      setSearchLoading(false);
    }
  };

  useEffect(() => {
    const timer = setTimeout(() => {
      if (searchQuery) {
        handleSearch(searchQuery);
      }
    }, 500);

    return () => clearTimeout(timer);
  }, [searchQuery]);

  const handleCreatePlaylist = async () => {
    const name = prompt('Enter playlist name:');
    if (name) {
      await dispatch(createPlaylist({ name, mood: selectedMood }));
    }
  };

  // Function to handle Spotify login
  const handleSpotifyLogin = () => {
    window.location.href = 'http://localhost:5000/api/spotify/login';
  };

  return (
    <Box sx={{ p: 3 }}>
      <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
        {/* Spotify Authentication Banner */}
        {!isAuthenticated && (
          <Paper
            elevation={3}
            sx={{
              p: 2,
              mb: 3,
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              backgroundColor: '#1DB954', // Spotify green
              color: 'white'
            }}
          >
            <Typography variant="h6">Connect with Spotify to unlock full features</Typography>
            <Button
              variant="contained"
              color="secondary"
              onClick={handleSpotifyLogin}
              sx={{ fontWeight: 'bold' }}
            >
              Connect with Spotify
            </Button>
          </Paper>
        )}
        
        <Grid container spacing={3}>
          <Grid item xs={12} md={8}>
            <Paper
              component={motion.div}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              elevation={3}
              sx={{ p: 3, mb: 3 }}
            >
              <Typography variant="h4" gutterBottom>
                Moodify
              </Typography>
              <Typography variant="subtitle1" gutterBottom>
                Discover music that matches your mood
              </Typography>
              
              <Box sx={{ mt: 3, mb: 3 }}>
                <TextField
                  fullWidth
                  label="Search for songs..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  variant="outlined"
                  sx={{ mb: 2 }}
                />
                
                {searchLoading && <CircularProgress size={24} sx={{ ml: 2 }} />}
              </Box>
              
              {error && (
                <Typography color="error" sx={{ mb: 2 }}>
                  {error}
                </Typography>
              )}
              
              {searchResults.length > 0 && (
                <Box sx={{ mt: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    Search Results
                  </Typography>
                  <Grid container spacing={2}>
                    {searchResults.map((track) => (
                      <Grid item xs={12} sm={6} md={4} key={track.id}>
                        <Paper
                          elevation={2}
                          sx={{
                            p: 2,
                            cursor: 'pointer',
                            '&:hover': { bgcolor: 'rgba(0, 0, 0, 0.03)' },
                            height: '100%',
                            display: 'flex',
                            flexDirection: 'column',
                          }}
                          onClick={() => dispatch(playTrack(track))}
                        >
                          <Box
                            sx={{
                              display: 'flex',
                              mb: 1,
                              height: 160,
                              justifyContent: 'center',
                              alignItems: 'center',
                              overflow: 'hidden',
                              borderRadius: 1,
                              bgcolor: 'rgba(0, 0, 0, 0.08)',
                            }}
                          >
                            {track.album?.cover_medium ? (
                              <img
                                src={track.album.cover_medium}
                                alt={track.title}
                                style={{ width: '100%', height: '100%', objectFit: 'cover' }}
                              />
                            ) : (
                              <Box
                                sx={{
                                  width: '100%',
                                  height: '100%',
                                  bgcolor: theme.palette.primary.main,
                                  display: 'flex',
                                  justifyContent: 'center',
                                  alignItems: 'center',
                                  color: 'white',
                                }}
                              >
                                <Typography variant="h6">{track.title.charAt(0)}</Typography>
                              </Box>
                            )}
                          </Box>
                          <Typography
                            variant="subtitle1"
                            component="div"
                            sx={{
                              fontWeight: 'bold',
                              overflow: 'hidden',
                              textOverflow: 'ellipsis',
                              whiteSpace: 'nowrap',
                            }}
                          >
                            {track.title}
                          </Typography>
                          <Typography
                            variant="body2"
                            color="text.secondary"
                            sx={{
                              overflow: 'hidden',
                              textOverflow: 'ellipsis',
                              whiteSpace: 'nowrap',
                            }}
                          >
                            {track.artist.name}
                          </Typography>
                        </Paper>
                      </Grid>
                    ))}
                  </Grid>
                </Box>
              )}
              
              {!searchQuery && (
                <Box sx={{ mt: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    {selectedMood.charAt(0).toUpperCase() + selectedMood.slice(1)} Mood Recommendations
                  </Typography>
                  
                  {recommendationsLoading ? (
                    <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
                      <CircularProgress />
                    </Box>
                  ) : recommendations.length > 0 ? (
                    <Grid container spacing={2}>
                      {recommendations.map((track) => (
                        <Grid item xs={12} sm={6} md={4} key={track.id}>
                          <Paper
                            elevation={2}
                            sx={{
                              p: 2,
                              cursor: 'pointer',
                              '&:hover': { bgcolor: 'rgba(0, 0, 0, 0.03)' },
                              height: '100%',
                              display: 'flex',
                              flexDirection: 'column',
                            }}
                            onClick={() => dispatch(playTrack(track))}
                          >
                            <Box
                              sx={{
                                display: 'flex',
                                mb: 1,
                                height: 160,
                                justifyContent: 'center',
                                alignItems: 'center',
                                overflow: 'hidden',
                                borderRadius: 1,
                                bgcolor: 'rgba(0, 0, 0, 0.08)',
                              }}
                            >
                              {track.album?.cover_medium ? (
                                <img
                                  src={track.album.cover_medium}
                                  alt={track.title}
                                  style={{ width: '100%', height: '100%', objectFit: 'cover' }}
                                />
                              ) : (
                                <Box
                                  sx={{
                                    width: '100%',
                                    height: '100%',
                                    bgcolor: moodColors[selectedMood] || theme.palette.primary.main,
                                    display: 'flex',
                                    justifyContent: 'center',
                                    alignItems: 'center',
                                    color: 'white',
                                  }}
                                >
                                  <Typography variant="h6">{track.title.charAt(0)}</Typography>
                                </Box>
                              )}
                            </Box>
                            <Typography
                              variant="subtitle1"
                              component="div"
                              sx={{
                                fontWeight: 'bold',
                                overflow: 'hidden',
                                textOverflow: 'ellipsis',
                                whiteSpace: 'nowrap',
                              }}
                            >
                              {track.title}
                            </Typography>
                            <Typography
                              variant="body2"
                              color="text.secondary"
                              sx={{
                                overflow: 'hidden',
                                textOverflow: 'ellipsis',
                                whiteSpace: 'nowrap',
                              }}
                            >
                              {track.artist.name}
                            </Typography>
                          </Paper>
                        </Grid>
                      ))}
                    </Grid>
                  ) : (
                    <Typography>
                      {isAuthenticated 
                        ? 'No recommendations available. Try selecting a different mood.' 
                        : 'Connect with Spotify to see personalized recommendations.'}
                    </Typography>
                  )}
                </Box>
              )}
            </Paper>
          </Grid>
          
          <Grid item xs={12} md={4}>
            <Paper
              component={motion.div}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
              elevation={3}
              sx={{ p: 3, mb: 3 }}
            >
              <Typography variant="h6" gutterBottom>
                Select a Mood
              </Typography>
              <Grid container spacing={2}>
                {Object.keys(moodColors).map((mood) => (
                  <Grid item xs={6} key={mood}>
                    <Button
                      fullWidth
                      variant={selectedMood === mood ? 'contained' : 'outlined'}
                      sx={{
                        bgcolor: selectedMood === mood ? moodColors[mood] : 'transparent',
                        borderColor: moodColors[mood],
                        color: selectedMood === mood ? 'white' : moodColors[mood],
                        '&:hover': {
                          bgcolor: selectedMood === mood ? moodColors[mood] : `${moodColors[mood]}22`,
                        },
                        textTransform: 'capitalize',
                      }}
                      onClick={() => setSelectedMood(mood)}
                    >
                      {mood}
                    </Button>
                  </Grid>
                ))}
              </Grid>
              
              <Box sx={{ mt: 4 }}>
                <Typography variant="h6" gutterBottom>
                  Your Playlists
                </Typography>
                <Button
                  variant="contained"
                  color="primary"
                  fullWidth
                  sx={{ mb: 2 }}
                  onClick={handleCreatePlaylist}
                >
                  Create New Playlist
                </Button>
                
                {loading ? (
                  <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>
                    <CircularProgress size={24} />
                  </Box>
                ) : playlists.length > 0 ? (
                  <Box>
                    {playlists.map((playlist) => (
                      <Paper
                        key={playlist._id}
                        elevation={1}
                        sx={{
                          p: 2,
                          mb: 1,
                          cursor: 'pointer',
                          '&:hover': { bgcolor: 'rgba(0, 0, 0, 0.03)' },
                        }}
                        onClick={() => navigate(`/playlist/${playlist._id}`)}
                      >
                        <Typography variant="subtitle1">{playlist.name}</Typography>
                        <Typography variant="body2" color="text.secondary">
                          {playlist.mood && `Mood: ${playlist.mood}`}
                          {playlist.songs && ` • ${playlist.songs.length} songs`}
                        </Typography>
                      </Paper>
                    ))}
                  </Box>
                ) : (
                  <Typography variant="body2">No playlists yet. Create your first one!</Typography>
                )}
              </Box>
            </Paper>
          </Grid>
        </Grid>
      </Container>
    </Box>
  );
};

export default Dashboard;
